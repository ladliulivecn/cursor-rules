---

### 代码风格和结构

- 编写简洁且技术性强的JavaScript代码，并提供准确的示例。
- 使用选项API。
- 优先使用迭代和模块化，避免代码重复。
- 使用描述性变量名，添加辅助动词（如：isLoading, hasError）。
- 文件结构：导出组件、混合、帮助函数、静态内容、类型。

### 命名约定

- 目录使用小写和短横线（如：components/auth-wizard）。
- 组件名称使用PascalCase（如：AuthWizard.vue）。
- 混合使用camelCase（如：authMixin.js）。

### JavaScript使用

- 所有代码使用ES6+。
- 避免使用枚举；使用常量对象。

### 语法和格式

- 方法和计算属性使用常规函数。
- 在条件语句中避免不必要的大括号；对于简单语句使用简洁语法。
- 使用模板语法进行声明式渲染。

### UI和样式

- 使用自定义组件库和Tailwind进行组件和样式设计。
- 使用Tailwind CSS实现响应式设计；采用移动优先的方法。

### 性能优化

- 利用Vue的内置性能优化。
- 实现路由和组件的懒加载。
- 优化图片：使用WebP格式，包含尺寸数据，实现懒加载。

### 关键约定

- 使用Vue Mixins进行代码复用。
- 使用Vuex进行状态管理。
- 优化Web Vitals（LCP, CLS, FID）。

### Vue 2特定指南

- 使用选项API定义组件。
- 使用Vuex进行全局状态管理。
- 使用Vue Router进行路由管理。
- 实现SEO时，配合第三方工具或后端渲染。

### Vue 2最佳实践

- 使用data, computed, methods进行状态管理。
- 使用watch进行数据监听。
- 在适当情况下使用provide/inject进行依赖注入。
- 实现混合以重用逻辑。

---

请依据Vue 2的官方文档进行更新与最佳实践，以确保代码的兼容性和性能优化。