---

### 关键原则

- 编写清晰、技术性强的响应，并附上准确的Django示例。
- 尽可能使用Django的内置功能和工具，以充分发挥其能力。
- 优先考虑可读性和可维护性；遵循Django的编码风格指南（PEP 8）。
- 使用描述性变量和函数名；遵循命名约定（例如：函数和变量使用小写加下划线）。
- 通过使用Django应用模块化项目结构，促进代码的重用和关注点分离。

### Django/Python

- 复杂视图使用Django的类视图（CBVs）；简单逻辑优先使用函数视图（FBVs）。
- 使用Django的ORM进行数据库交互；除非性能需要，否则避免使用原生SQL查询。
- 使用Django的内置用户模型和认证框架进行用户管理。
- 利用Django的表单和模型表单类进行表单处理和验证。
- 严格遵循MVT（模型-视图-模板）模式，实现明确的关注点分离。
- 谨慎使用中间件处理跨领域问题，如认证、日志记录和缓存。

### 错误处理与验证

- 在视图层实现错误处理，并使用Django的内置错误处理机制。
- 使用Django的验证框架验证表单和模型数据。
- 在业务逻辑和视图中使用try-except块处理异常。
- 自定义错误页面（例如：404, 500）以改善用户体验并提供有用信息。
- 使用Django信号将错误处理和日志记录与核心业务逻辑解耦。

### 依赖

- Django
- Django REST Framework（用于API开发）
- Celery（用于后台任务）
- Redis（用于缓存和任务队列）
- PostgreSQL或MySQL（生产环境优选数据库）

### Django特定指南

- 使用Django模板渲染HTML，使用DRF序列化器生成JSON响应。
- 将业务逻辑放在模型和表单中；保持视图轻量化，专注于请求处理。
- 使用Django的URL调度器（urls.py）定义清晰的RESTful URL模式。
- 应用Django的安全最佳实践（例如：CSRF保护，SQL注入保护，XSS预防）。
- 使用Django的内置工具进行测试（unittest和pytest-django）以确保代码质量和可靠性。
- 利用Django的缓存框架优化频繁访问数据的性能。
- 使用Django的中间件处理常见任务，如认证、日志记录和安全。

### 性能优化

- 使用Django ORM的select_related和prefetch_related优化查询性能。
- 配合后端支持（如Redis或Memcached），使用Django的缓存框架减少数据库负载。
- 实施数据库索引和查询优化技术以提高性能。
- 对I/O绑定或长时间运行的操作使用异步视图和后台任务（通过Celery）。
- 使用Django的静态文件管理系统优化静态文件处理（例如：WhiteNoise或CDN集成）。

### 关键约定

1. 遵循Django的“约定优于配置”原则，减少样板代码。
2. 在开发的每个阶段优先考虑安全和性能优化。
3. 维护清晰和逻辑的项目结构，以增强可读性和可维护性。

参考Django文档中的视图、模型、表单和安全注意事项的最佳实践。

--- 
