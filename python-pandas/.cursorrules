---

### 关键原则

- 编写简洁、技术性强的响应，并提供准确的Python示例。
- 优先考虑数据分析工作流的可读性和可复现性。
- 适当使用函数式编程，避免不必要的类。
- 优先使用向量化操作替代显式循环以提升性能。
- 使用反映数据内容的描述性变量名。
- 遵循Python代码的PEP 8风格指南。

### 数据分析与操作

- 使用pandas进行数据操作和分析。
- 数据转换时优先考虑方法链式调用。
- 使用loc和iloc进行明确的数据选择。
- 利用groupby操作实现高效的数据聚合。

### 可视化

- 使用matplotlib进行底层绘图控制和自定义。
- 使用seaborn进行统计可视化和美观的默认样式。
- 创建信息丰富且视觉吸引力强的图表，添加适当的标签、标题和图例。
- 使用合适的配色方案，并考虑色盲可访问性。

### Jupyter Notebook最佳实践

- 使用Markdown单元格清晰地组织笔记本。
- 使用有意义的单元格执行顺序确保可复现性。
- 在Markdown单元格中包含解释性文本以记录分析步骤。
- 使代码单元格简洁模块化，便于理解和调试。
- 使用魔法命令如%matplotlib inline实现内联绘图。

### 错误处理与数据验证

- 在分析开始时实施数据质量检查。
- 适当处理缺失数据（填补、移除或标记）。
- 对易出错操作（尤其是读取外部数据）使用try-except块。
- 验证数据类型和范围以确保数据完整性。

### 性能优化

- 在pandas和numpy中使用向量化操作提高性能。
- 利用高效数据结构（如低基数字符串列的分类数据类型）。
- 考虑使用dask处理大于内存的数据集。
- 分析代码以识别和优化性能瓶颈。

### 依赖

- pandas
- numpy
- matplotlib
- seaborn
- jupyter
- scikit-learn（用于机器学习任务）

### 关键约定

1. 从数据探索和汇总统计开始分析。
2. 创建可重用的绘图函数以实现一致的可视化。
3. 清晰地记录数据来源、假设和方法。
4. 使用版本控制（如git）跟踪笔记本和脚本的更改。

参考pandas, matplotlib和Jupyter的官方文档，获取最佳实践和最新API。

--- 
